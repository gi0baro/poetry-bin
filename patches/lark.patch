diff --git a/lark/grammars/__init__.py b/lark/grammars/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/lark/load_grammar.py b/lark/load_grammar.py
index fcdd9d0..581efce 100644
--- a/lark/load_grammar.py
+++ b/lark/load_grammar.py
@@ -8,6 +8,7 @@ import pkgutil
 from ast import literal_eval
 from contextlib import suppress
 from typing import List, Tuple, Union, Callable, Dict, Optional, Sequence
+from importlib import resources
 
 from .utils import bfs, logger, classify_bool, is_id_continue, is_id_start, bfs_all_unique, small_factors
 from .lexer import Token, TerminalDef, PatternStr, PatternRE
@@ -23,7 +24,6 @@ from .tree import Tree, SlottedTree as ST
 from .visitors import Transformer, Visitor, v_args, Transformer_InPlace, Transformer_NonRecursive
 inline_args = v_args(inline=True)
 
-__path__ = os.path.dirname(__file__)
 IMPORT_PATHS = ['grammars']
 
 EXT = '.lark'
@@ -318,7 +318,7 @@ class EBNF_to_BNF(Transformer_InPlace):
         if mx < REPEAT_BREAK_THRESHOLD:
             return ST('expansions', [ST('expansion', [rule] * n) for n in range(mn, mx + 1)])
 
-        # For large repeat values, we break the repetition into sub-rules. 
+        # For large repeat values, we break the repetition into sub-rules.
         # We treat ``rule~mn..mx`` as ``rule~mn rule~0..(diff=mx-mn)``.
         # We then use small_factors to split up mn and diff up into values [(a, b), ...]
         # This values are used with the help of _add_repeat_rule and _add_repeat_rule_opt
@@ -846,7 +846,9 @@ class FromPackageLoader:
         for path in to_try:
             full_path = os.path.join(path, grammar_path)
             try:
-                text: Optional[bytes] = pkgutil.get_data(self.pkg_name, full_path)
+                pkg = ".".join([self.pkg_name] + full_path.split(os.path.sep)[:-1])
+                item = full_path.split(os.path.sep)[-1]
+                text: Optional[bytes] = resources.read_binary(pkg, item)
             except IOError as e:
                 err = e
                 continue
@@ -1233,7 +1235,7 @@ class GrammarBuilder:
         tree = _parse_grammar(grammar_text, grammar_name)
 
         imports: Dict[Tuple[str, ...], Tuple[Optional[str], Dict[str, str]]] = {}
-          
+
         for stmt in tree.children:
             if stmt.data == 'import':
                 dotted_path, base_path, aliases = self._unpack_import(stmt, grammar_name)
@@ -1316,7 +1318,7 @@ class GrammarBuilder:
                 if self.used_files.get(joined_path, h) != h:
                     raise RuntimeError("Grammar file was changed during importing")
                 self.used_files[joined_path] = h
-                    
+
                 gb = GrammarBuilder(self.global_keep_all_tokens, self.import_paths, self.used_files)
                 gb.load_grammar(text, joined_path, mangle)
                 gb._remove_unused(map(mangle, aliases))
@@ -1390,7 +1392,7 @@ def verify_used_files(file_hashes):
                 text = pkgutil.get_data(*path).decode('utf-8')
         if text is None: # We don't know how to load the path. ignore it.
             continue
-            
+
         current = hashlib.md5(text.encode()).hexdigest()
         if old != current:
             logger.info("File %r changed, rebuilding Parser" % path)
