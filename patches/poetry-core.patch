diff --git a/poetry/core/__init__.py b/poetry/core/__init__.py
index e57db47..5eeeed7 100644
--- a/poetry/core/__init__.py
+++ b/poetry/core/__init__.py
@@ -9,7 +9,8 @@ except ImportError:
 
 __version__ = "1.0.7"
 
-__vendor_site__ = (Path(__file__).parent / "_vendor").as_posix()
+if not getattr(sys, "oxidized", False):
+    __vendor_site__ = (Path(__file__).parent / "_vendor").as_posix()
 
-if __vendor_site__ not in sys.path:
-    sys.path.insert(0, __vendor_site__)
+    if __vendor_site__ not in sys.path:
+        sys.path.insert(0, __vendor_site__)
diff --git a/poetry/core/json/__init__.py b/poetry/core/json/__init__.py
index 83ecab7..9f94540 100644
--- a/poetry/core/json/__init__.py
+++ b/poetry/core/json/__init__.py
@@ -1,29 +1,26 @@
 import json
-import os
 
-from io import open
+from importlib import resources
 from typing import List
 
 from jsonschema import Draft7Validator
 
 
-SCHEMA_DIR = os.path.join(os.path.dirname(__file__), "schemas")
-
-
 class ValidationError(ValueError):
 
     pass
 
 
 def validate_object(obj, schema_name):  # type: (dict, str) -> List[str]
-    schema = os.path.join(SCHEMA_DIR, "{}.json".format(schema_name))
-
-    if not os.path.exists(schema):
+    try:
+        schema = json.loads(
+            resources.read_text(
+                f"{__name__}.schemas", "{}.json".format(schema_name)
+            )
+        )
+    except Exception:
         raise ValueError("Schema {} does not exist.".format(schema_name))
 
-    with open(schema, encoding="utf-8") as f:
-        schema = json.loads(f.read())
-
     validator = Draft7Validator(schema)
     validation_errors = sorted(validator.iter_errors(obj), key=lambda e: e.path)
 
diff --git a/poetry/core/json/schemas/__init__.py b/poetry/core/json/schemas/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/poetry/core/spdx/__init__.py b/poetry/core/spdx/__init__.py
index 713aa30..490c7a9 100644
--- a/poetry/core/spdx/__init__.py
+++ b/poetry/core/spdx/__init__.py
@@ -1,14 +1,12 @@
 import json
-import os
 
-from io import open
+from importlib import resources
 from typing import Dict
 from typing import Optional
 
 from .license import License
 from .updater import Updater
 
-
 _licenses = None  # type: Optional[Dict[str, License]]
 
 
@@ -31,10 +29,7 @@ def load_licenses():  # type: () -> None
 
     _licenses = {}
 
-    licenses_file = os.path.join(os.path.dirname(__file__), "data", "licenses.json")
-
-    with open(licenses_file, encoding="utf-8") as f:
-        data = json.loads(f.read())
+    data = json.loads(resources.read_text(f"{__name__}.data", "licenses.json"))
 
     for name, license_info in data.items():
         license = License(name, license_info[0], license_info[1], license_info[2])
diff --git a/poetry/core/spdx/data/__init__.py b/poetry/core/spdx/data/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/poetry/core/version/grammars/__init__.py b/poetry/core/version/grammars/__init__.py
index e69de29..e88bac8 100644
--- a/poetry/core/version/grammars/__init__.py
+++ b/poetry/core/version/grammars/__init__.py
@@ -0,0 +1,12 @@
+import sys
+
+from pathlib import Path
+
+
+if getattr(sys, "oxidized", False):
+    parents = 4 if sys.platform.startswith("win") else 5
+    __path_assets__ = (
+        Path(__path__[0]).parents[parents] / "assets" / "core" / "version" / "grammars"
+    )
+else:
+    __path_assets__ = Path(__path__[0])
diff --git a/poetry/core/version/markers.py b/poetry/core/version/markers.py
index ac6c2b6..5eb5d95 100644
--- a/poetry/core/version/markers.py
+++ b/poetry/core/version/markers.py
@@ -1,4 +1,3 @@
-import os
 import re
 
 from typing import TYPE_CHECKING
@@ -12,6 +11,8 @@ from lark import Lark
 from lark import Token
 from lark import Tree
 
+from .grammars import __path_assets__
+
 
 if TYPE_CHECKING:
     from poetry.core.semver import VersionTypes  # noqa
@@ -49,7 +50,7 @@ ALIASES = {
     "python_implementation": "platform_python_implementation",
 }
 _parser = Lark.open(
-    os.path.join(os.path.dirname(__file__), "grammars", "markers.lark"), parser="lalr"
+    __path_assets__ / "markers.lark", parser="lalr"
 )
 
 
diff --git a/poetry/core/version/requirements.py b/poetry/core/version/requirements.py
index c9601a0..d0029fc 100644
--- a/poetry/core/version/requirements.py
+++ b/poetry/core/version/requirements.py
@@ -5,8 +5,6 @@ from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
 
-import os
-
 from lark import Lark
 from lark import UnexpectedCharacters
 from lark import UnexpectedToken
@@ -14,6 +12,7 @@ from lark import UnexpectedToken
 from poetry.core.semver import parse_constraint
 from poetry.core.semver.exceptions import ParseConstraintError
 
+from .grammars import __path_assets__
 from .markers import _compact_markers
 
 
@@ -30,7 +29,7 @@ class InvalidRequirement(ValueError):
 
 
 _parser = Lark.open(
-    os.path.join(os.path.dirname(__file__), "grammars", "pep508.lark"), parser="lalr"
+    __path_assets__ / "pep508.lark", parser="lalr"
 )
 
 
