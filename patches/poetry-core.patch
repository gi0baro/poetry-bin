diff --git a/poetry/core/__init__.py b/poetry/core/__init__.py
index 1c56044..1cac7d3 100644
--- a/poetry/core/__init__.py
+++ b/poetry/core/__init__.py
@@ -1,15 +1,14 @@
 import sys
 
-
-try:
-    from pathlib import Path
-except ImportError:
-    # noinspection PyUnresolvedReferences
-    from pathlib2 import Path
+from pathlib import Path
 
 __version__ = "1.0.6"
 
-__vendor_site__ = (Path(__file__).parent / "_vendor").as_posix()
-
-if __vendor_site__ not in sys.path:
-    sys.path.insert(0, __vendor_site__)
+if getattr(sys, "oxidized", False):
+    parents = 2 if sys.platform.startswith("win") else 3
+    __path_assets__ = Path(__path__[0]).parents[parents] / "assets" / "core"
+else:
+    __path_assets__ = None
+    __vendor_site__ = (Path(__file__).parent / "_vendor").as_posix()
+    if __vendor_site__ not in sys.path:
+        sys.path.insert(0, __vendor_site__)
diff --git a/poetry/core/json/__init__.py b/poetry/core/json/__init__.py
index 83ecab7..893291a 100644
--- a/poetry/core/json/__init__.py
+++ b/poetry/core/json/__init__.py
@@ -2,12 +2,17 @@ import json
 import os
 
 from io import open
+from pathlib import Path
 from typing import List
 
 from jsonschema import Draft7Validator
 
+from .. import __path_assets__
 
-SCHEMA_DIR = os.path.join(os.path.dirname(__file__), "schemas")
+SCHEMA_DIR = (
+    __path_assets__ / "json" / "schemas" if __path_assets__ else
+    Path(__path__[0]) / "schemas"
+)
 
 
 class ValidationError(ValueError):
diff --git a/poetry/core/spdx/__init__.py b/poetry/core/spdx/__init__.py
index 713aa30..207f3bd 100644
--- a/poetry/core/spdx/__init__.py
+++ b/poetry/core/spdx/__init__.py
@@ -2,12 +2,19 @@ import json
 import os
 
 from io import open
+from pathlib import Path
 from typing import Dict
 from typing import Optional
 
+from .. import __path_assets__
 from .license import License
-from .updater import Updater
 
+_ASSETS_PATH = (
+    __path_assets__ / "spdx" if __path_assets__ else
+    Path(__path__[0]) / "data"
+)
+
+from .updater import Updater
 
 _licenses = None  # type: Optional[Dict[str, License]]
 
@@ -31,7 +38,7 @@ def load_licenses():  # type: () -> None
 
     _licenses = {}
 
-    licenses_file = os.path.join(os.path.dirname(__file__), "data", "licenses.json")
+    licenses_file = _ASSETS_PATH / "licenses.json"
 
     with open(licenses_file, encoding="utf-8") as f:
         data = json.loads(f.read())
diff --git a/poetry/core/spdx/updater.py b/poetry/core/spdx/updater.py
index 30c3a51..d098944 100644
--- a/poetry/core/spdx/updater.py
+++ b/poetry/core/spdx/updater.py
@@ -12,6 +12,8 @@ try:
 except ImportError:
     from urllib2 import urlopen
 
+from . import _ASSETS_PATH
+
 
 class Updater:
 
@@ -22,7 +24,7 @@ class Updater:
 
     def dump(self, file=None):  # type: (Optional[str]) -> None
         if file is None:
-            file = os.path.join(os.path.dirname(__file__), "data", "licenses.json")
+            file = _ASSETS_PATH / "licenses.json"
 
         licenses_url = self._base_url + "licenses.json"
 
diff --git a/poetry/core/version/__init__.py b/poetry/core/version/__init__.py
index 62d0349..02ca001 100644
--- a/poetry/core/version/__init__.py
+++ b/poetry/core/version/__init__.py
@@ -1,7 +1,15 @@
 import operator
 
+from pathlib import Path
 from typing import Union
 
+from .. import __path_assets__
+
+_GRAMMARS_PATH = (
+    __path_assets__ / "version" / "grammars" if __path_assets__ else
+    Path(__path__[0]) / "grammars"
+)
+
 from .exceptions import InvalidVersion
 from .legacy_version import LegacyVersion
 from .version import Version
diff --git a/poetry/core/version/markers.py b/poetry/core/version/markers.py
index ac6c2b6..4454d1f 100644
--- a/poetry/core/version/markers.py
+++ b/poetry/core/version/markers.py
@@ -1,6 +1,7 @@
 import os
 import re
 
+from pathlib import Path
 from typing import TYPE_CHECKING
 from typing import Any
 from typing import Dict
@@ -12,6 +13,8 @@ from lark import Lark
 from lark import Token
 from lark import Tree
 
+from . import _GRAMMARS_PATH
+
 
 if TYPE_CHECKING:
     from poetry.core.semver import VersionTypes  # noqa
@@ -49,7 +52,7 @@ ALIASES = {
     "python_implementation": "platform_python_implementation",
 }
 _parser = Lark.open(
-    os.path.join(os.path.dirname(__file__), "grammars", "markers.lark"), parser="lalr"
+    os.path.join(_GRAMMARS_PATH, "markers.lark"), parser="lalr"
 )
 
 
diff --git a/poetry/core/version/requirements.py b/poetry/core/version/requirements.py
index c9601a0..35a9c21 100644
--- a/poetry/core/version/requirements.py
+++ b/poetry/core/version/requirements.py
@@ -14,6 +14,7 @@ from lark import UnexpectedToken
 from poetry.core.semver import parse_constraint
 from poetry.core.semver.exceptions import ParseConstraintError
 
+from . import _GRAMMARS_PATH
 from .markers import _compact_markers
 
 
@@ -30,7 +31,7 @@ class InvalidRequirement(ValueError):
 
 
 _parser = Lark.open(
-    os.path.join(os.path.dirname(__file__), "grammars", "pep508.lark"), parser="lalr"
+    os.path.join(_GRAMMARS_PATH, "pep508.lark"), parser="lalr"
 )
 
 
