name: Tests

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '.cirrus.yml'
      - '.github/workflows/docs.yml'
    branches:
      - master
      - develop
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '.cirrus.yml'
      - '.github/workflows/docs.yml'
    branches:
      - '**'

concurrency:
  group: tests-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }} ${{ matrix.suffix }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu, macOS, Windows]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - os: macOS
            image: macos-12
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y ${{ matrix.bootstrap-args }}

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install --with github-actions

      - name: Run mypy
        run: poetry run mypy

      - name: Run pytest
        env:
          POETRY_TEST_INTEGRATION_GIT_USERNAME: ${GITHUB_ACTOR}
          POETRY_TEST_INTEGRATION_GIT_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: poetry run pytest --integration -v

      - name: Get Plugin Version (poetry-plugin-export)
        id: poetry-plugin-export-version
        run: |
          echo ::set-output name=version::$(\
            poetry show poetry-plugin-export  | grep version | cut -d : -f 2 | xargs)

      - name: Checkout Plugin Source (poetry-plugin-export)
        uses: actions/checkout@v3
        with:
          path: poetry-plugin-export
          repository: python-poetry/poetry-plugin-export
          ref: refs/tags/${{ steps.poetry-plugin-export-version.outputs.version }}

      - name: Run pytest (poetry-plugin-export)
        run: poetry run pytest -v poetry-plugin-export/tests/

      - name: Check for clean working tree
        run: |
          git diff --exit-code --stat HEAD
          git -C poetry-plugin-export diff --exit-code --stat HEAD
